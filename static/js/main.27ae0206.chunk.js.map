{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["emailRegex","RegExp","formValid","_ref","formErrors","rest","Object","objectWithoutProperties","valid","values","forEach","val","length","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","state","console","log","concat","firstName","lastName","email","password","error","handleChange","_e$target","target","name","value","test","setState","defineProperty","react_default","a","createElement","className","onSubmit","noValidate","htmlFor","onChange","placeholder","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27ae0206.chunk.js","sourcesContent":["import React ,{Component}from 'react';\n\nimport './App.css';\n\n\nconst emailRegex = RegExp(\n  /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n);\n\n\nconst formValid = ({ formErrors, ...rest }) => {\n  let valid = true;\n\n  // validate form errors being empty\n  Object.values(formErrors).forEach(val => {\n    val.length > 0 && (valid = false);\n  });\n\n  // validate the form was filled out\n  Object.values(rest).forEach(val => {\n    val === null && (valid = false);\n  });\n\n  return valid;\n};\n\n\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.state= {\n      firstName:\"\",\n      lastName:\"\",\n      email:\"\",\n      password:\"\",\n      formErrors :{\n        firstName:\"\",\n        lastName: \"\",\n        email:\"\",\n        password:\"\"\n      }\n    };\n\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    if(formValid(this.state)){\n      console.log(`\n        SUBMITTING\n\n        FirstName :${this.state.firstName}\n        LastName :${this.state.lastName}\n        Email :${this.state.email}\n        Password :${this.state.password}\n        `\n\n      );\n    }\n    else{\n      console.error(\"INVALID FORM\");\n    }\n  };\n\n  handleChange= e =>{\n    e.preventDefault();\n    const {name, value} =e.target;\n\n    let formErrors= this.state.formErrors;\n\n    //console.log(\"Name:\",value);\n    switch(name)\n    {\n      case 'firstName':\n        formErrors.firstName=value.length<3  ?\n        \"minimum 3 characters required\" : \"\";\n        break;\n      case 'lastName':\n            formErrors.lastName=value.length<3  ?\n            \"minimum 3 characters required\" : \"\";\n            break;\n      case 'email':\n        formErrors.email=\n        emailRegex.test(value)  ?  '': 'enter valid email address';\n                break;\n\n      case 'password':\n                    formErrors.password=value.length<6  ?\n                    \"minimum 6 characters required\" : \"\";\n                    break;\n      \n      default:\n        break;\n \n    }\n\n    this.setState({formErrors,[name]:value},()=>console.log(this.state));\n\n  };\n  render(){\n\n    const { formErrors }= this.state;\n  return (\n    <div className=\"wrapper\">\n      <div className=\"form-wrapper\">\n\n        <h1>Create Account</h1>\n        <form onSubmit={this.handleSubmit} noValidate>\n\n          <div className=\"firstName\">\n            <label htmlFor=\"firstName\">First Name:</label>\n            <input  noValidate \n            className={formErrors.firstName.length>0?\"error\":null}\n             name=\"firstName\" \n             onChange={this.handleChange}\n             placeholder=\"First Name\"></input>\n\n             {formErrors.firstName.length>0 &&(\n               <span className=\"errorMessage\">\n                 { \n                     formErrors.firstName\n                 }\n\n               </span>\n             )}\n\n\n          </div>\n          \n\n\n\n          <div className=\"lastName\">\n            <label htmlFor=\"\">Last Name:</label>\n            <input  noValidate className={formErrors.lastName.length>0?\"error\":null}\n             name=\"lastName\" \n             onChange={this.handleChange}\n             placeholder=\"Last Name\"></input>\n             {formErrors.lastName.length>0 &&(\n               <span className=\"errorMessage\">\n                 { \n                     formErrors.lastName\n                 }\n\n               </span>\n             )}\n          </div>\n\n\n          <div className=\"email\">\n            <label htmlFor=\"email\">Email:</label>\n            <input  noValidate className={formErrors.email.length>0?\"error\":null}\n             name=\"email\" \n             onChange={this.handleChange}\n             placeholder=\"Email\"></input>\n             {formErrors.email.length>0 &&(\n               <span className=\"errorMessage\">\n                 { \n                     formErrors.email\n                 }\n\n               </span>\n             )}\n          </div>\n\n          <div className=\"password\">\n            <label htmlFor=\"password\">Password:</label>\n            <input  noValidate className={formErrors.password.length>0?\"error\":null}\n             name=\"password\" \n             onChange={this.handleChange}\n             placeholder=\"Password\"></input>\n             {formErrors.password.length>0 &&(\n               <span className=\"errorMessage\">\n                 { \n                     formErrors.password\n                 }\n\n               </span>\n             )}\n          </div>\n          <div className=\"createAccount\">\n            <button type=\"submit\" >Create Account</button>\n            <small>Already have an Account?</small>\n          </div>\n\n\n        </form>\n      \n\n\n      </div>\n     \n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}